# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GqDLqAi7YeH1RTVjWnX3de9B6WE6oiAC

Name: Nishendu Mishra

Topic: Diabetes Detection System

Email: nishendumishra73@gmail.com
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset
"""

#loading the diabetes dataset to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

"""run pd.read_csv? to know about the function of read_csv

"""

diabetes_dataset.head()

diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

diabetes_dataset.groupby('Outcome').mean()

"""so we can see diabetic patients hav high glucose level in them and they have more average age also"""

x = diabetes_dataset.drop(columns='Outcome', axis=1)
y = diabetes_dataset['Outcome']

"""Data Standardization"""

scaler = StandardScaler()

standardized_data= scaler.fit_transform(x)

x= standardized_data

print(x)

print(y)

print(x.std())

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2,stratify=y, random_state=2)

print(x.shape, x_train.shape, x_test.shape)

"""Training the Model

SVC represents support vector classifier
"""

classifier = svm.SVC(kernel='linear')

#training the support vector machine classifier
classifier.fit(x_train, y_train)

"""Evaluation of the Model

Accuracy Score
"""

#accuracy score of the training data
x_train_prediction = classifier.predict(x_train)
training_data_accuracy = accuracy_score(x_train_prediction, y_train)

print('Accuracy score of the training data: ', training_data_accuracy)

#accuracy score of the testing data
x_test_prediction = classifier.predict(x_test)
testing_data_accuracy = accuracy_score(x_test_prediction, y_test)

print('Accuracy score of the testing data: ', testing_data_accuracy)

"""Making a predictive System"""

input_data = (3,158,76,36,245,31.6,0.851,28)
#change the input data to a numpy array

input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
#because our model has been trained on 768 data values , so to remove any confusion we are reshaping the data

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# standardize the input data
std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if(prediction[0] == 0):
  print('The person is Non Diabetic')
else:
  print('The person is Diabetic')